<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Introduction on Unofficial Grex User Guide</title><link>http://um-grex.github.io/grex-docs/</link><description>Recent content in Introduction on Unofficial Grex User Guide</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="http://um-grex.github.io/grex-docs/index.xml" rel="self" type="application/rss+xml"/><item><title>CVMFS and ComputeCanada</title><link>http://um-grex.github.io/grex-docs/docs/grex/software/cern-vmfs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://um-grex.github.io/grex-docs/docs/grex/software/cern-vmfs/</guid><description>Cern VMFS on Grex CVMFS or CernVM stands for CernVM File System. It provides a scalable, reliable and low-maintenance software distribution service. It was developed to assist High Energy Physics (HEP) collaborations to deploy software on the worldwide-distributed computing infrastructure used to run data processing applications.
Presently, we use CernVMFS (CVMFS) to provide Compute Canada&amp;rsquo;s software stack. We plan to add more publically available CVMFS software repositories such as the one from OpenScienceGrid , in a near future.</description></item><item><title>General Linux tools</title><link>http://um-grex.github.io/grex-docs/docs/grex/software/general-linux/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://um-grex.github.io/grex-docs/docs/grex/software/general-linux/</guid><description>Linux tools on Grex There is a number of general and distro-specific tools on Grex that are worth mentioning here. Such tools are: text editors, image viewers, file managers, &amp;hellip; etc.
Command line Text editors Command line text editors allow you to edit files right on Grex in any terminal session (such as SSH session or an X terminal under X2Go):
The (arguably) most popular editor is vi, or vim.</description></item><item><title>Containers for Software</title><link>http://um-grex.github.io/grex-docs/docs/grex/software/containers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://um-grex.github.io/grex-docs/docs/grex/software/containers/</guid><description>Introduction Linux Containers are means to isolate software dependencies from the base Linux operation system. On Grex, we support the Singularity container system, now developed by a company called SyLabs. Several other Linux containers engines exist, most notably Docker which is a very popular tool in DevOps community. Presently Docker containers cannot be directly supported on shared HPC systems like Grex. However, with help of Singularity, it is possible to run Docker images from the DockerHub , as well as native Singularity images from other repositories, such as SingularityHub and SyLabsCloud .</description></item><item><title>Code Development on Grex</title><link>http://um-grex.github.io/grex-docs/docs/grex/software/code-development/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://um-grex.github.io/grex-docs/docs/grex/software/code-development/</guid><description>Code Developing on Grex Grex comes with a sizeable software stack that contains most of the software development environment for typical HPC applications. This section of the documentation covers the best practices for compiling and building your own software on Grex.
The login nodes of Grex can be used to compile codes and to run short interactive and/or test runs. All other jobs must be submitted to the batch system. We do not do as heavy resource limiting on Grex login nodes as, for example, Compute Canada does; so code development on login nodes is entirely possible.</description></item><item><title>Using JuPyTer Notebooks</title><link>http://um-grex.github.io/grex-docs/docs/grex/software/jupyter-notebook/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://um-grex.github.io/grex-docs/docs/grex/software/jupyter-notebook/</guid><description>Jupyter on Grex Jupyter is a Web-interface aimed to support interactive data science and scientific computing. Jupyter supports several dynamic languages, most notably Python, R and Julia. Jupyter offers a metaphor of &amp;ldquo;computational document&amp;rdquo; that combines code, data and visualizations, and can be published or shared with collaborators.
Jupyter can be used either as a simple, individual notebook or as a multi-user Webserver/Interactive Development Environment (IDE), such as JupyterHub/JupyterLab. The JupyterHub servers can use a variety of computational back-end configurations: from free-for-all shared workstation to job spawning interfaces to HPC schedulers like SLURM or container workflow systems like Kubernetes.</description></item><item><title>A New Blog post</title><link>http://um-grex.github.io/grex-docs/posts/atestofpost/</link><pubDate>Fri, 15 May 2015 00:00:00 +0000</pubDate><guid>http://um-grex.github.io/grex-docs/posts/atestofpost/</guid><description>Introduction I do not know if adding a text file with date would just place it right
Some Definitions There are a few concepts that you need to understand before creating a theme.
Don&amp;rsquo;t Repeat Yourself DRY is a good design goal and Hugo does a great job supporting it. Part of the art of a good template is knowing when to add a new template and when to update an existing one.</description></item><item><title>Creating a New Theme</title><link>http://um-grex.github.io/grex-docs/posts/creating-a-new-theme/</link><pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate><guid>http://um-grex.github.io/grex-docs/posts/creating-a-new-theme/</guid><description>Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description></item><item><title>(Hu)go Template Primer</title><link>http://um-grex.github.io/grex-docs/posts/goisforlovers/</link><pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate><guid>http://um-grex.github.io/grex-docs/posts/goisforlovers/</guid><description>Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.
This document is a brief primer on using Go templates.</description></item><item><title>Getting Started with Hugo</title><link>http://um-grex.github.io/grex-docs/posts/hugoisforlovers/</link><pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate><guid>http://um-grex.github.io/grex-docs/posts/hugoisforlovers/</guid><description>Step 1. Install Hugo Go to Hugo releases and download the appropriate version for your OS and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at Install Hugo Step 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:
Clone the Hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313 Corresponding pseudo commands:</description></item><item><title>Migrate to Hugo from Jekyll</title><link>http://um-grex.github.io/grex-docs/posts/migrate-from-jekyll/</link><pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate><guid>http://um-grex.github.io/grex-docs/posts/migrate-from-jekyll/</guid><description>Move static content to static Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/ ▾ images/ logo.png should become
▾ &amp;lt;root&amp;gt;/ ▾ static/ ▾ images/ logo.png Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description></item><item><title/><link>http://um-grex.github.io/grex-docs/docs/grex/data/data-sharing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://um-grex.github.io/grex-docs/docs/grex/data/data-sharing/</guid><description>Data sharing Sharing of accounts login information (like passwords or SSH keys) is stricty forbidden on Grex, as well as on most of the HPC systems. There is a mechanism of data/file sharing that does not require sharing of the accounts. To access each others' data on Grex, the UNIX groups and permissions mechanism can be used as explined below.
UNIX groups Each UNIX (or Linux) file or directory is owned by an individual user and also by a group (which may be comprised of several users).</description></item><item><title/><link>http://um-grex.github.io/grex-docs/docs/grex/data/data-sizes-and-quota/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://um-grex.github.io/grex-docs/docs/grex/data/data-sizes-and-quota/</guid><description>Data sizes and quotas This section explains how to find the actual space and inode usage of your /home/ and /global/scratch allocations on Grex. We limit the size of the data and the number of files that can be stored on these filesystems. To figure out where your current usage stands with the limit, POSIX quota or Lustres' analog, lfs quota commands can be used.
NFS quota The /home/ filesystem is served by NFSv1 and thus supports the standard POSIX quota command.</description></item><item><title/><link>http://um-grex.github.io/grex-docs/docs/grex/software/specific/gaussian/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://um-grex.github.io/grex-docs/docs/grex/software/specific/gaussian/</guid><description>Gaussian Introduction Gaussian 16 is a comprehensive suite for electronic structure modeling using ab initio, DFT and semi-empirical methods. A list of Gaussian 16 features can be found here .
User Responsibilities and Access University of Manitoba has a site license for Gaussian 16 and GaussView. However it comes with certain license limitations, so access to the code is subject to some license conditions.
Since, as of now, Compute Canada accounts are a superset of Grex accounts, users will want to initiate getting access by sendiong email agreeing to Gaussian conditions to support@tech.</description></item><item><title/><link>http://um-grex.github.io/grex-docs/docs/grex/software/specific/julia/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://um-grex.github.io/grex-docs/docs/grex/software/specific/julia/</guid><description>Ho to run Julia jobs? Available Julia versions Presently, binary Julia versions 1.3.0, 1.5.4 and 1.6.1 are available. Use module spider julia to find out other versions.
Installing packages We do not maintain centralized versions of Julia packages. User should install Julia modules in their home directory.
The command is (in Julia REPL):
Using Pkg; Pkg.Add(&amp;quot;My-Package&amp;quot;) In case of package/version conflicts, remove the packages directory ~/.julia/.
Using Julia notebooks It is possible to use IJulia kernels for Jupyter notebooks.</description></item><item><title/><link>http://um-grex.github.io/grex-docs/docs/grex/software/specific/lammps/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://um-grex.github.io/grex-docs/docs/grex/software/specific/lammps/</guid><description>LAMMPS Introduction Text Work in progress &amp;hellip;
#!/bin/bash #SBATCH --ntasks=16 #SBATCH --cpus-per-task=1 #SBATCH --mem-per-cpu=1500M #SBATCH --time=0-3:00:00 #SBATCH --job-name=lmp-tst # Load the module: module load intel/2019.5 ompi/3.1.4 lammps/29Sep21 echo &amp;#34;Starting run at: `date`&amp;#34; lmp_exec=lmp_grex lmp_input=&amp;#34;lammps.in&amp;#34; lmp_output=&amp;#34;lammps_lj_output.txt&amp;#34; srun ${lmp_exec} &amp;lt; ${lmp_input} &amp;gt; ${lmp_output} echo &amp;#34;Program finished with exit code $?at: `date`&amp;#34;</description></item><item><title/><link>http://um-grex.github.io/grex-docs/docs/grex/software/specific/matlab/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://um-grex.github.io/grex-docs/docs/grex/software/specific/matlab/</guid><description>Matlab on Grex Introduction MATLAB is a general-purpose high-level programming package for numerical work such as linear algebra, signal processing and other calculations involving matrices or vectors of data. We have a campus license for MATLAB which is used on Grex and other local computing resources. MATLAB is available only for UManitoba users.
As most of the Grex software, MATLAB is available as module. The following command will load the latest version available on Grex:</description></item><item><title/><link>http://um-grex.github.io/grex-docs/docs/grex/software/specific/nwchem/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://um-grex.github.io/grex-docs/docs/grex/software/specific/nwchem/</guid><description>NWChem Introduction NWChem is a Scalable open-source solution for large scale molecular simulations. NWChem is actively developed by a consortium of developers and maintained by the EMSL located at the Pacific Northwest National Laboratory (PNNL) in Washington State. The code is distributed as open-source under the terms of the Educational Community License version 2.0 (ECL 2.0).
System specific notes On Grex software stack, NWChem is using OpenMPI 3.1 with Intel compilers toolchains.</description></item><item><title/><link>http://um-grex.github.io/grex-docs/docs/grex/software/specific/orca/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://um-grex.github.io/grex-docs/docs/grex/software/specific/orca/</guid><description>ORCA Introduction ORCA is a flexible, efficient and easy-to-use general purpose tool for quantum chemistry with specific emphasis on spectroscopic properties of open-shell molecules. It features a wide variety of standard quantum chemical methods ranging from semiempirical methods to DFT to single - and multireference correlated ab initio methods. It can also treat environmental and relativistic effects.
User Responsibilities and Access ORCA is a proprietary software, even if it is free it still requires you to agree to the ORCA license conditions.</description></item><item><title/><link>http://um-grex.github.io/grex-docs/docs/grex/software/specific/priroda/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://um-grex.github.io/grex-docs/docs/grex/software/specific/priroda/</guid><description>Priroda Introduction Priroda is a fast parallel relativistic DFT and ab initio code for molecular modeling, developed by Dr. Dimitri N. Laikov. The code originally implemented fast resolution-of-identity GGA DFT for coulomb and exchange integrals. Later it was extended to provide RI-DFT with hybrid functionals, RI-HF and RI-MP2, and parallel high-level coupled-cluster methods. All these levels of theory can be used together with an efficient all-electron scalar-relativistic method, with small-component bases supplied for all the elements of Periodic Table.</description></item><item><title/><link>http://um-grex.github.io/grex-docs/docs/grex/software/specific/vasp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://um-grex.github.io/grex-docs/docs/grex/software/specific/vasp/</guid><description>VASP Introduction VASP is a massively parallel plane-wave solid state DFT code. On Grex it is available only for the research groups that hold VASP license. To get access, PIs would need to send us a confirmation email from the VASP vendor, detailing status of their license and a list of users allowed to use it.
System specific notes On the Grex local software stack, we have VASP 5 and VASP 6 is using Intel compiler and OpenMPI 3.</description></item></channel></rss>