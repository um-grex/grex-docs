<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Applications on Grex</title><link>https://um-grex.github.io/grex-docs/categories/applications/</link><description>Recent content in Applications on Grex</description><generator>Hugo</generator><language>en</language><copyright>The MIT License (MIT) Copyright Â© 2025 UM-Grex</copyright><atom:link href="https://um-grex.github.io/grex-docs/categories/applications/index.xml" rel="self" type="application/rss+xml"/><item><title>General Linux tools</title><link>https://um-grex.github.io/grex-docs/software/general-linux/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://um-grex.github.io/grex-docs/software/general-linux/</guid><description>&lt;h2 id='linux-tools-on-grex'&gt;Linux tools on Grex&lt;a href='#linux-tools-on-grex' class='anchor'&gt;#&lt;/a&gt;
&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;There are a number of general and distro-specific tools on Grex that are worth mentioning here. Such tools are: &lt;strong&gt;text editors&lt;/strong&gt;, &lt;strong&gt;image viewers&lt;/strong&gt;, &lt;strong&gt;file managers&lt;/strong&gt;, &amp;hellip; etc.&lt;/p&gt;
&lt;h2 id='command-line-text-editors'&gt;Command line Text editors&lt;a href='#command-line-text-editors' class='anchor'&gt;#&lt;/a&gt;
&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;Command line text editors allow you to edit files right on Grex in any terminal session (such as SSH session or an X terminal under OOD):&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;The (arguably) most popular editor is &lt;strong&gt;vi&lt;/strong&gt;, or &lt;strong&gt;vim&lt;/strong&gt;. It is very powerful, but requires some experience to use it. To exit a &lt;strong&gt;vim&lt;/strong&gt; session, you can use the &lt;strong&gt;ZZ&lt;/strong&gt; key combination (hold shift key + zz), or &lt;strong&gt;ESC, :x!&lt;/strong&gt;. There are many vi tutorials around, for &lt;a
 href="http://heather.cs.ucdavis.edu/~matloff/UnixAndC/Editors/ViIntro.html"
 class="is-pretty-link"&gt;example this one&lt;/a
&gt;
 or &lt;a
 href="https://learnxinyminutes.com/docs/vim/"
 class="is-pretty-link"&gt;learn VIM in X minutes&lt;/a
&gt;
 .&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Another lightweight text-mode editor is &lt;strong&gt;nano&lt;/strong&gt;. It provides a self-explanatory key-combination menu at the bottom of the screen. An online manual can be found &lt;a
 href="https://www.nano-editor.org/dist/v2.1/nano.html"
 class="is-pretty-link"&gt;here&lt;/a
&gt;
.&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;A more modern alternative to &amp;ldquo;nano&amp;rdquo; is &lt;strong&gt;micro&lt;/strong&gt; . On Grex it is available only as module (&lt;code&gt;module load micro&lt;/code&gt;) . &lt;strong&gt;micro&lt;/strong&gt; supports syntax coloring for a number of programming languages. The webpage of &lt;a
 href="https://micro-editor.github.io/"
 class="is-pretty-link"&gt;micro&lt;/a
&gt;
 .&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Midnight Commander file manager provides a text-mode editor that can be invoked stand-alone as &lt;strong&gt;mc -e filename&lt;/strong&gt;, or from within &lt;strong&gt;mc&lt;/strong&gt; by using F4 or Edit menu item on a selected file.&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;h2 id='gui-text-editors'&gt;GUI Text editors&lt;a href='#gui-text-editors' class='anchor'&gt;#&lt;/a&gt;
&lt;/h2&gt;&lt;hr&gt;
&lt;!--
Sometimes it is useful (for example, for copy/paste operations with mouse, between client computer and a remote session) or convenient to have a text editor with a graphical user interface. Note that a most practical way to use this is from X2Go sessions that provide tolerable interaction speeds.
--&gt;
&lt;p&gt;Vi has a GUI counterpart which is accessible as &lt;strong&gt;evim&lt;/strong&gt; command. There are also the following GUI editors: &lt;strong&gt;nedit&lt;/strong&gt; and &lt;strong&gt;xfe-xfw&lt;/strong&gt;.&lt;/p&gt;</description></item><item><title>Modules and software stacks</title><link>https://um-grex.github.io/grex-docs/software/using-modules/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://um-grex.github.io/grex-docs/software/using-modules/</guid><description>&lt;h2 id='introduction'&gt;Introduction&lt;a href='#introduction' class='anchor'&gt;#&lt;/a&gt;
&lt;/h2&gt;&lt;hr&gt;
&lt;!--
&lt;div class="sc-collapsible-container"&gt;
 &lt;div class="sc-collapsible-header"&gt;Modules allow for clean and dynamic modification of the user&amp;#39;s Linux session environment&lt;/div&gt;
 &lt;div class="sc-collapsible-content"&gt;&lt;/div&gt;
&lt;/div&gt;

--&gt;
&lt;p&gt;On a Linux server or a Linux desktop, software can be installed in one of the standard locations, such as &lt;em&gt;/usr/bin&lt;/em&gt;. This is where most of the system-level software binaries can be found. For custom user-built software, it is a good practice to install it separately from the standard location, to avoid potential conflicts and make changes and uni-installation possible. One of the common locations would be under &lt;em&gt;/usr/local/&lt;/em&gt;, as in &lt;em&gt;/usr/local/My_Custom_software/&lt;/em&gt; , or under &lt;em&gt;/opt&lt;/em&gt; (&lt;em&gt;/opt/My_Other_custom_software&lt;/em&gt;).&lt;/p&gt;</description></item><item><title>Using Python for ML on Grex</title><link>https://um-grex.github.io/grex-docs/specific-soft/python-ai/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://um-grex.github.io/grex-docs/specific-soft/python-ai/</guid><description>&lt;h2 id='introduction'&gt;Introduction&lt;a href='#introduction' class='anchor'&gt;#&lt;/a&gt;
&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;Python is a dynamic language with many optional Library &amp;ldquo;modules&amp;rdquo; available. Moreover, Python is often used as a &amp;ldquo;glue&amp;rdquo; language for interacting with tools and libraries written in other languages (C/C++, Fortran, CUDA, etc.).
This makes maintenance of Python software difficult. Not only do Python and libraries need to be of the right versions, but also other software they depend on should be of the same versions that have been used to build the corresponding packages.&lt;/p&gt;</description></item><item><title>Code Development on Grex</title><link>https://um-grex.github.io/grex-docs/software/code-development/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://um-grex.github.io/grex-docs/software/code-development/</guid><description>&lt;h2 id='introduction'&gt;Introduction&lt;a href='#introduction' class='anchor'&gt;#&lt;/a&gt;
&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;Grex comes with a sizable software stack that contains most of the software development environment for typical HPC applications. This section of the documentation covers best practices for compiling and building your own software on Grex.&lt;/p&gt;
&lt;p&gt;On Grex, login nodes can be used to compile software and to run short interactive and/or test runs. All other jobs must be submitted to the &lt;a
 href="https://um-grex.github.io/grex-docs/running-jobs/batch-jobs/"
 class="is-pretty-link"&gt;batch&lt;/a
&gt;
 system. User sessions on the login nodes are limited by &lt;em&gt;cgroups&lt;/em&gt; to prevent resource congestion. Thus, it sometimes makes sense to perform some of the code development in interactive jobs, in cases such as (but not limited to):&lt;/p&gt;</description></item><item><title>Containers for Software</title><link>https://um-grex.github.io/grex-docs/software/containers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://um-grex.github.io/grex-docs/software/containers/</guid><description>&lt;h2 id='introduction'&gt;Introduction&lt;a href='#introduction' class='anchor'&gt;#&lt;/a&gt;
&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;Linux Containers are means to isolate software dependencies from the base Linux operating system (OS). Several different Linux container engines exist, most notably &lt;a
 href="https://www.docker.com"
 class="is-pretty-link"&gt;Docker&lt;/a
&gt;
 which was first to emerge as the most popular tool in the DevOps community.&lt;/p&gt;
&lt;p&gt;Since then, a lot of work had been done by major Linux players like Google, RedHat and others to develop an open standard for container runtimes, which developed based on Docker, &lt;a
 href="https://opencontainers.org/"
 class="is-pretty-link"&gt;OCI&lt;/a
&gt;
.&lt;/p&gt;</description></item><item><title>List of Software in SBEnv environment</title><link>https://um-grex.github.io/grex-docs/software/software-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://um-grex.github.io/grex-docs/software/software-list/</guid><description>&lt;h2 id='software-available-on-the-ccenv-software-stack-on-grex'&gt;Software available on the CCEnv software stack on Grex.&lt;a href='#software-available-on-the-ccenv-software-stack-on-grex' class='anchor'&gt;#&lt;/a&gt;
&lt;/h2&gt;&lt;p&gt;Grex receives the ComputeCanada/Alliance software environment via CVMFS. Full autogenerated list of software is available at the &lt;a
 href="https://docs.alliancecan.ca/wiki/Available_software"
 class="is-pretty-link"&gt;Available Software page&lt;/a
&gt;
 on the Allince Documentation Wiki.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note that Grex does not install local, commercial software licensed only to the National/Alliance systems. The software listed under &amp;ldquo;List of globally-installed modules&amp;rdquo; is available.&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id='software-available-on-the-sbenv-software-stack-on-grex'&gt;Software available on the SBEnv software stack on Grex.&lt;a href='#software-available-on-the-sbenv-software-stack-on-grex' class='anchor'&gt;#&lt;/a&gt;
&lt;/h2&gt;&lt;p&gt;Below is the auto-generated list of software modules available on Grex&amp;rsquo;s local SBEnv software stack.&lt;/p&gt;</description></item></channel></rss>