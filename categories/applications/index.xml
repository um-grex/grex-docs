<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Applications on Grex</title><link>https://alikerr.github.io/grex-docs/categories/applications/</link><description>Recent content in Applications on Grex</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>The MIT License (MIT) Copyright Â© 2022 um-grex</copyright><atom:link href="https://alikerr.github.io/grex-docs/categories/applications/index.xml" rel="self" type="application/rss+xml"/><item><title>General Linux tools</title><link>https://alikerr.github.io/grex-docs/software/general-linux/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alikerr.github.io/grex-docs/software/general-linux/</guid><description>Linux tools on Grex # There are a number of general and distro-specific tools on Grex that are worth mentioning here. Such tools are: text editors, image viewers, file managers, &amp;hellip; etc.
Command line Text editors # Command line text editors allow you to edit files right on Grex in any terminal session (such as SSH session or an X terminal under X2Go):
The (arguably) most popular editor is vi, or vim.</description></item><item><title>Modules and software stacks</title><link>https://alikerr.github.io/grex-docs/software/using-modules/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alikerr.github.io/grex-docs/software/using-modules/</guid><description> Introduction # External links # The Alliance documentation about using module</description></item><item><title>Code Development on Grex</title><link>https://alikerr.github.io/grex-docs/software/code-development/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alikerr.github.io/grex-docs/software/code-development/</guid><description>Introduction # Grex comes with a sizable software stack that contains most of the software development environment for typical HPC applications. This section of the documentation covers the best practices for compiling and building your own software on Grex.
The login nodes of Grex can be used to compile codes and to run short interactive and/or test runs. All other jobs must be submitted to the batch system. We do not do as heavy resource limiting on Grex login nodes as, for example, Compute Canada does; so, code development on login nodes is entirely possible.</description></item><item><title>Containers for Software</title><link>https://alikerr.github.io/grex-docs/software/containers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alikerr.github.io/grex-docs/software/containers/</guid><description>Introduction # Linux Containers are means to isolate software dependencies from the base Linux operating system. On Grex, we support the Singularity container system, now developed by a company called SyLabs. Several other Linux container engines exist, most notably Docker which is a very popular tool in DevOps community. Presently Docker containers cannot be directly supported on shared HPC systems like Grex. However, with help of Singularity, it is possible to run Docker images from DockerHub, as well as native Singularity images from other repositories, such as SingularityHub and SyLabsCloud.</description></item></channel></rss>