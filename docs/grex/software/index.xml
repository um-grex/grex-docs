<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Unofficial Grex User Guide</title><link>http://um-grex.github.io/grex-docs/docs/grex/software/</link><description>Recent content on Unofficial Grex User Guide</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="http://um-grex.github.io/grex-docs/docs/grex/software/index.xml" rel="self" type="application/rss+xml"/><item><title>CVMFS and ComputeCanada</title><link>http://um-grex.github.io/grex-docs/docs/grex/software/cern-vmfs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://um-grex.github.io/grex-docs/docs/grex/software/cern-vmfs/</guid><description>Cern VMFS on Grex CVMFS or CernVM stands for CernVM File System. It provides a scalable, reliable and low-maintenance software distribution service. It was developed to assist High Energy Physics (HEP) collaborations to deploy software on the worldwide-distributed computing infrastructure used to run data processing applications.
Presently, we use CernVMFS (CVMFS) to provide Compute Canada&amp;rsquo;s software stack. We plan to add more publically available CVMFS software repositories such as the one from OpenScienceGrid , in a near future.</description></item><item><title>General Linux tools</title><link>http://um-grex.github.io/grex-docs/docs/grex/software/general-linux/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://um-grex.github.io/grex-docs/docs/grex/software/general-linux/</guid><description>Linux tools on Grex There is a number of general and distro-specific tools on Grex that are worth mentioning here. Such tools are: text editors, image viewers, file managers, &amp;hellip; etc.
Command line Text editors Command line text editors allow you to edit files right on Grex in any terminal session (such as SSH session or an X terminal under X2Go):
The (arguably) most popular editor is vi, or vim.</description></item><item><title>Containers for Software</title><link>http://um-grex.github.io/grex-docs/docs/grex/software/containers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://um-grex.github.io/grex-docs/docs/grex/software/containers/</guid><description>Introduction Linux Containers are means to isolate software dependencies from the base Linux operation system. On Grex, we support the Singularity container system, now developed by a company called SyLabs. Several other Linux containers engines exist, most notably Docker which is a very popular tool in DevOps community. Presently Docker containers cannot be directly supported on shared HPC systems like Grex. However, with help of Singularity, it is possible to run Docker images from the DockerHub , as well as native Singularity images from other repositories, such as SingularityHub and SyLabsCloud .</description></item><item><title>Code Development on Grex</title><link>http://um-grex.github.io/grex-docs/docs/grex/software/code-development/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://um-grex.github.io/grex-docs/docs/grex/software/code-development/</guid><description>Code Developing on Grex Grex comes with a sizeable software stack that contains most of the software development environment for typical HPC applications. This section of the documentation covers the best practices for compiling and building your own software on Grex.
The login nodes of Grex can be used to compile codes and to run short interactive and/or test runs. All other jobs must be submitted to the batch system. We do not do as heavy resource limiting on Grex login nodes as, for example, Compute Canada does; so code development on login nodes is entirely possible.</description></item><item><title>Using JuPyTer Notebooks</title><link>http://um-grex.github.io/grex-docs/docs/grex/software/jupyter-notebook/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://um-grex.github.io/grex-docs/docs/grex/software/jupyter-notebook/</guid><description>Jupyter on Grex Jupyter is a Web-interface aimed to support interactive data science and scientific computing. Jupyter supports several dynamic languages, most notably Python, R and Julia. Jupyter offers a metaphor of &amp;ldquo;computational document&amp;rdquo; that combines code, data and visualizations, and can be published or shared with collaborators.
Jupyter can be used either as a simple, individual notebook or as a multi-user Webserver/Interactive Development Environment (IDE), such as JupyterHub/JupyterLab. The JupyterHub servers can use a variety of computational back-end configurations: from free-for-all shared workstation to job spawning interfaces to HPC schedulers like SLURM or container workflow systems like Kubernetes.</description></item></channel></rss>